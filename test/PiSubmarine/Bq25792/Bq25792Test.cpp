#include <gtest/gtest.h>
#include "PiSubmarine/Bq25792/Bq25792.h"
#include "I2CDriverMock.h"
#include <chrono>

using namespace std::chrono_literals;

namespace PiSubmarine::Bq25792
{
	TEST(Bq25792Test, MinimalSystemVoltage)
	{
		std::array<uint8_t, 0x49> mockData = { 0x26, 0x6, 0x90, 0x0, 0x64, 0x24, 0x1, 0x2c, 0xc3, 0x5, 0xe3, 0x0, 0xdc, 0x4b, 0x3d, 0xa2, 0x85, 0x40, 0x0, 0x1, 0x16, 0xaa, 0xc0, 0x7a, 0x54, 0x0, 0x32, 0x20, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xf9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3c, 0x6a, 0x3c, 0x77, 0x0, 0x0, 0x0, 0x22, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8 };
		std::array<uint8_t, 0x49> mockDataWriteExpected = { 0x2F, 0x6, 0x90, 0x0, 0x64, 0x24, 0x1, 0x2c, 0xc3, 0x5, 0xe3, 0x0, 0xdc, 0x4b, 0x3d, 0xa2, 0x85, 0x40, 0x0, 0x1, 0x16, 0xaa, 0xc0, 0x7a, 0x54, 0x0, 0x32, 0x20, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xf9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3c, 0x6a, 0x3c, 0x77, 0x0, 0x0, 0x0, 0x22, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8 };

		I2CDriverMock driver{ mockData };
		Bq25792<I2CDriverMock> device{driver};

		bool readStarted = device.Read();
		ASSERT_TRUE(readStarted);
		while (device.IsDirty())
		{
			std::this_thread::sleep_for(100ms);
		}

		MilliVolts vsysmin = device.GetMinimalSystemVoltage();
		ASSERT_EQ(vsysmin, 12000_mV);

		vsysmin = 14250_mV; // Will be 0b00101111 or 0x2F
		device.SetMinimalSystemVoltage(vsysmin);
		bool writeStarted = device.Write(RegOffset::MinimalSystemVoltage);
		ASSERT_TRUE(writeStarted);
		while (device.IsDirty())
		{
			std::this_thread::sleep_for(100ms);
		}

		ASSERT_EQ(mockData, mockDataWriteExpected);
	}
}